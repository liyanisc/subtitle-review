WEBVTT

00:00:00.000 --> 00:00:01.140 align:middle line:90%


00:00:01.140 --> 00:00:04.800 align:middle line:84%
欢迎来到ELEARING课程：Ensemble入门

00:00:04.800 --> 00:00:07.495 align:middle line:90%
请求(Requests),响应(Responses) and 队列(Queues)。

00:00:10.510 --> 00:00:13.380 align:middle line:84%
发送请求和收到响应

00:00:13.380 --> 00:00:16.690 align:middle line:84%
是开发ensemble产品中的最重要的事情。

00:00:16.690 --> 00:00:19.770 align:middle line:84%
也就是定义Ensemble组件间是怎么通信的。

00:00:20.770 --> 00:00:22.780 align:middle line:84%
这一课讨论什么是请求消息，响应消息的基本原理

00:00:24.780 --> 00:00:27.810 align:middle line:84%
以及业务组件的消息队列。

00:00:30.450 --> 00:00:34.650 align:middle line:84%
每个Ensemble消息包含一个消息头和一个消息体

00:00:34.650 --> 00:00:36.500 align:middle line:84%
消息头包含以下信息：

00:00:36.500 --> 00:00:38.770 align:middle line:84%
消息类型和消息状态。

00:00:38.770 --> 00:00:41.830 align:middle line:84%
所有消息的消息头结构是一样的

00:00:41.830 --> 00:00:44.100 align:middle line:90%
这是由Ensemble定义的。

00:00:44.100 --> 00:00:48.460 align:middle line:84%
消息体是应用程序发送的信息


00:00:48.460 --> 00:00:52.030 align:middle line:84%
消息体必须是一个持久化的对象(Persistent Object)

00:00:52.030 --> 00:00:54.620 align:middle line:90%
并且被储存于数据库里面。

00:00:54.620 --> 00:00:57.130 align:middle line:84%
它可以是一个简单的Ensemble类

00:00:57.130 --> 00:01:03.650 align:middle line:84%
或者是一个复杂的实体，比如HL7消息

00:01:03.650 --> 00:01:09.460 align:middle line:84%
当消息被发送，Ensemble自动产生消息头。

00:01:09.460 --> 00:01:12.750 align:middle line:84%
业务服务或者业务流程里面的代码

00:01:12.750 --> 00:01:16.760 align:middle line:84%
产生一个消息体的实例

00:01:16.760 --> 00:01:19.010 align:middle line:90%
就像任意其他的对象。

00:01:19.010 --> 00:01:23.540 align:middle line:84%
对于一个预置的业务组件，比如Ensemble的

00:01:23.540 --> 00:01:26.660 align:middle line:90%
HL7业务服务，这些都是已经实现好的。 

00:01:26.660 --> 00:01:29.420 align:middle line:90%


00:01:29.420 --> 00:01:32.050 align:middle line:84%
让我们看一个实际运行的产品

00:01:32.050 --> 00:01:37.980 align:middle line:84%
业务服务CompositeOrderService

00:01:37.980 --> 00:01:41.410 align:middle line:84%
发送一个医嘱请求给业务流程

00:01:41.410 --> 00:01:46.110 align:middle line:84%
CompositeOrderProcess，并等待一个响应

00:01:46.110 --> 00:01:49.550 align:middle line:90%


00:01:49.550 --> 00:01:53.250 align:middle line:84%
CompositeOrderProcess将处理医嘱并且
will process the order

00:01:53.250 --> 00:02:00.720 align:middle line:84%
发送响应给CompositeOrderService。

00:02:00.720 --> 00:02:10.169 align:middle line:84%
这个网页用来发送一个要处理的医嘱给CompositeOrderService

00:02:10.169 --> 00:02:16.860 align:middle line:84%
我们可以选择一个产品，定义数量

00:02:16.860 --> 00:02:21.690 align:middle line:84%
下达医嘱，并且等待响应。

00:02:21.690 --> 00:02:24.000 align:middle line:84%
就像画面显示的， 医嘱被下达了，

00:02:24.000 --> 00:02:25.110 align:middle line:90%
然后我们得到了费用的总数。

00:02:25.110 --> 00:02:27.800 align:middle line:90%


00:02:27.800 --> 00:02:30.630 align:middle line:84%
现在，让我们看看这些消息

00:02:30.630 --> 00:02:35.650 align:middle line:84%
就是我们实现这个流程所用的消息。

00:02:35.650 --> 00:02:37.830 align:middle line:84%
为了研究这些消息

00:02:37.830 --> 00:02:44.320 align:middle line:84%
我们使用Ensemble管理界面-查看-消息

00:02:44.320 --> 00:02:45.945 align:middle line:84%
来看所有消息的展示

00:02:45.945 --> 00:02:50.700 align:middle line:90%


00:02:50.700 --> 00:02:54.160 align:middle line:84%
第一个要看的是我们下达的医嘱

00:02:54.160 --> 00:02:57.500 align:middle line:84%
通过点击我们的第一个消息

00:02:57.500 --> 00:03:08.820 align:middle line:84%
我们看到了消息头， 消息体，全部的内容展现为xml格式

00:03:08.820 --> 00:03:11.890 align:middle line:90%
更重要的是，消息跟踪

00:03:11.890 --> 00:03:16.790 align:middle line:84%
展示了我们处理的所有消息

00:03:16.790 --> 00:03:20.320 align:middle line:90%
以医嘱处理的顺序来展现

00:03:20.320 --> 00:03:28.215 align:middle line:84%
让我们看看这个消息跟踪的详细内容。

00:03:28.215 --> 00:03:31.550 align:middle line:90%

00:03:31.550 --> 00:03:35.740 align:middle line:84%
第一个消息是CompostieOrderRequest.

00:03:35.740 --> 00:03:40.380 align:middle line:84%
这里我们可以再次看到， 消息头， 消息体

00:03:40.380 --> 00:03:43.600 align:middle line:84%
已经展现为xml的消息内容

00:03:43.600 --> 00:03:46.150 align:middle line:84%
点击每一个消息， 我们可以

00:03:46.150 --> 00:03:50.180 align:middle line:84%
看到消息中的相应内容。

00:03:50.180 --> 00:03:53.130 align:middle line:84%
通过点击每一个消息

00:03:53.130 --> 00:03:58.290 align:middle line:84%
每个消息头的结构都是一样的

00:03:58.290 --> 00:04:06.590 align:middle line:84%
只是其中的内容是各自不同的。

00:04:06.590 --> 00:04:10.360 align:middle line:84%
消息体各自有相应的消息类型

00:04:10.360 --> 00:04:15.010 align:middle line:84%
这些类型是Ensemble产品中定义的。

00:04:15.010 --> 00:04:17.940 align:middle line:84%
所以消息体的内容是不同的

00:04:17.940 --> 00:04:21.055 align:middle line:84%
基于消息的定义和设置。

00:04:21.055 --> 00:04:24.200 align:middle line:90%


00:04:24.200 --> 00:04:28.300 align:middle line:84%
消息跟踪会显示所有的错误，

00:04:28.300 --> 00:04:32.910 align:middle line:84%
这样你可以诊断并处理产品中产生的这些错误


00:04:32.910 --> 00:04:37.780 align:middle line:90%


00:04:37.780 --> 00:04:40.970 align:middle line:84%
队列(Queues)实际上是数据库中的记录

00:04:40.970 --> 00:04:45.580 align:middle line:84%
这些记录记录了到即将被处理的消息的消息头的指针。


00:04:45.580 --> 00:04:52.690 align:middle line:84%
队列存在于运行中的产品的每个业务流程和业务操作


00:04:52.690 --> 00:04:57.060 align:middle line:84%
队列的名字和业务组件的名字是相同的。


00:04:57.060 --> 00:04:59.420 align:middle line:84%
因为队列是存在数据库中的，

00:04:59.420 --> 00:05:03.910 align:middle line:84%
即使系统重启他们也不会丢失。

00:05:03.910 --> 00:05:07.990 align:middle line:84%
CompositeOrderService产生了一个医嘱下达的消息体

00:05:07.990 --> 00:05:12.340 align:middle line:84%
同时把请求消息同步发送给了CompositeOrderPRocess

00:05:12.340 --> 00:05:17.560 align:middle line:84%
意味着CompositeOrderService会

00:05:17.560 --> 00:05:19.910 align:middle line:90%
等待一个响应消息。

00:05:19.910 --> 00:05:23.990 align:middle line:84%
一旦确定目标业务流程对象存在

00:05:23.990 --> 00:05:26.310 align:middle line:84%
就会有一个新的消息头对象被创建出来

00:05:26.310 --> 00:05:30.250 align:middle line:84%
并被设置包含消息体的类名

00:05:30.250 --> 00:05:34.200 align:middle line:84%
以及消息体ID, 来关联

00:05:34.200 --> 00:05:36.980 align:middle line:84%
CompositeOrderService正在发送的这个消息。

00:05:36.980 --> 00:05:40.650 align:middle line:84%
消息头和消息体都会被保存到硬盘

00:05:40.650 --> 00:05:43.400 align:middle line:84%
同时消息头的ID

00:05:43.400 --> 00:05:46.940 align:middle line:84%
会被放到CompositeOrderProcess的消息队列中。

00:05:46.940 --> 00:05:51.040 align:middle line:84%
最后一步是发送一个信号量(signal)给业务流程CompositeOrderProcess

00:05:51.040 --> 00:05:54.420 align:middle line:84%
这样它就可以被唤醒来读取消息队列的内容。

00:05:54.420 --> 00:05:59.570 align:middle line:90%


00:05:59.570 --> 00:06:03.430 align:middle line:84%
如果业务服务异步发送消息

00:06:03.430 --> 00:06:08.420 align:middle line:84%
它就继续执行下去不等待响应消息

00:06:08.420 --> 00:06:11.670 align:middle line:84%
因为CompositeOrderService用的同步发送

00:06:11.670 --> 00:06:14.970 align:middle line:84%
它就会等待从业务流程CompositeOrderProcess的响应

00:06:14.970 --> 00:06:18.570 align:middle line:84%
这通过创建一个新的

00:06:18.570 --> 00:06:21.250 align:middle line:84%
只供CompositeOrderServie使用的消息队列

00:06:21.250 --> 00:06:24.340 align:middle line:84%
当返回消息到达时，业务服务会被信号量唤醒。

00:06:24.340 --> 00:06:28.220 align:middle line:84%
CompositeOrderProcess中的业务代码

00:06:28.220 --> 00:06:31.840 align:middle line:84%
处理请求消息，创建一个响应消息的消息体

00:06:31.840 --> 00:06:34.120 align:middle line:84%
当处理成功时，响应消息会被返回回去

00:06:34.120 --> 00:06:36.720 align:middle line:84%
Ensemble会自动

00:06:36.720 --> 00:06:40.410 align:middle line:84%
产生一个消息体，把它放到一个私有队列

00:06:40.410 --> 00:06:44.360 align:middle line:84%
同时发送信号量来唤醒CompositeOrderService.

00:06:44.360 --> 00:06:47.100 align:middle line:84%
在这个时候, CompositeOrderService

00:06:47.100 --> 00:06:51.476 align:middle line:84%
会接下来处理收到的响应消息。

00:06:51.476 --> 00:06:55.190 align:middle line:90%


00:06:55.190 --> 00:06:58.140 align:middle line:84%
现在让我们看看一个业务流程

00:06:58.140 --> 00:07:00.420 align:middle line:84%
和业务服务不同，一个业务流程

00:07:00.420 --> 00:07:03.950 align:middle line:84%
有这样的能力：发送一个异步调用，

00:07:03.950 --> 00:07:07.180 align:middle line:84%
做一些其他工作，然后等待(sync)响应消息

00:07:07.180 --> 00:07:09.530 align:middle line:84%
如果业务流程是用客户代码而不是BPL写出来的

00:07:09.530 --> 00:07:13.130 align:middle line:84%
一个同步调用和业务服务里的同步调用非常类似

00:07:13.130 --> 00:07:16.550 align:middle line:84%
但对于异步调用，你必须在代码里面包括

00:07:16.550 --> 00:07:19.920 align:middle line:84%
一个调用来同步响应消息

00:07:19.920 --> 00:07:22.000 align:middle line:84%
对于用BPL写出的业务流程

00:07:22.000 --> 00:07:24.170 align:middle line:90%
这稍微有点不一样。

00:07:24.170 --> 00:07:31.340 align:middle line:84%
调用活动有一个选项-‘'asyn'(异步调用)的设置

00:07:31.340 --> 00:07:34.570 align:middle line:90%
默认是选中。

00:07:34.570 --> 00:07:41.750 align:middle line:84%
设置'asyn'选中意味着发送异步请求

00:07:41.750 --> 00:07:49.280 align:middle line:84%
这样你后面必须添加一个'sync'活动

00:07:49.280 --> 00:07:52.010 align:middle line:84%
否则相应消息将被丢弃。

00:07:52.010 --> 00:07:54.640 align:middle line:90%


00:07:54.640 --> 00:07:58.310 align:middle line:84%
如果你设置'async'等于false

00:07:58.310 --> 00:08:01.420 align:middle line:84%
消息将被同步发送

00:08:01.420 --> 00:08:05.160 align:middle line:84%
这听上去有点奇怪，所以我再强调一遍

00:08:05.160 --> 00:08:08.320 align:middle line:84%
如果你说，设置async为false

00:08:08.320 --> 00:08:11.330 align:middle line:84%
它实际上还是发送异步请求

00:08:11.330 --> 00:08:14.070 align:middle line:84%
不一样的是同步的处理"synchronizing"

00:08:14.070 --> 00:08:18.730 align:middle line:84%
是在调用活动里面暗藏的，而你不需要做任何处理

00:08:18.730 --> 00:08:22.840 align:middle line:84%
所以从逻辑上说，它的表现是同步调用。

00:08:22.840 --> 00:08:25.650 align:middle line:84%
这么做的原因是业务流程

00:08:25.650 --> 00:08:29.990 alig:middle line:84%
几乎永远不应该做一个真正的同步调用

00:08:29.990 --> 00:08:32.760 align:middle line:84%
当一个业务流程发起一个异步调用
When a Business Process
makes an asynchronous call

00:08:32.760 --> 00:08:35.960 align:middle line:84%
那么同步处理"syncs"要么是暗藏的， 要么是明确设定的(使用sync)

00:08:35.960 --> 00:08:38.840 align:middle line:84%
业务流程的状态被写到磁盘

00:08:38.840 --> 00:08:41.460 align:middle line:84%
同时实现业务流程的任务(job)

00:08:41.460 --> 00:08:43.520 align:middle line:90%
被释放来做其他工作。

00:08:43.520 --> 00:08:46.880 align:middle line:84%
如果一个业务流程不得不等待任何长时间的响应

00:08:46.880 --> 00:08:50.840 align:middle line:84%
使用真正的同步调用

00:08:50.840 --> 00:08:53.800 align:middle line:84%
会造成业务流程被阻塞

00:08:53.800 --> 00:08:57.240 align:middle line:84%
增加私有池数目(Pool Size)能改善这种情况，但内存的开销

00:08:57.240 --> 00:09:01.440 align:middle line:84%
和
and the loss of first
in first out processing.

00:09:01.440 --> 00:09:05.900 align:middle line:84%
如果你真的必须使用真正的同步调用

00:09:05.900 --> 00:09:08.210 align:middle line:84%
可以用代码块(code block)来实现

00:09:08.210 --> 00:09:11.290 align:middle line:84%
但这是一个非常特殊的要求

00:09:11.290 --> 00:09:14.900 align:middle line:84%
对于无论是明确配置的同步或者暗含的同步

00:09:14.900 --> 00:09:19.075 align:middle line:84%
业务流程都将在收到返回消息后继续工作

00:09:19.075 --> 00:09:21.620 align:middle line:90%


00:09:21.620 --> 00:09:25.530 align:middle line:84%
这里在我们看来非常明显的，返回消息

00:09:25.530 --> 00:09:30.490 align:middle line:84%
到业务服务CompositeOrderService，从业务流程CompositeOrderProcess.

00:09:30.490 --> 00:09:34.190 align:middle line:84%
CompositeOrderService即不知道也不关心这些

00:09:34.190 --> 00:09:37.400 align:middle line:84%
它只是在它的消息队列里有了一个返回消息

00:09:37.400 --> 00:09:41.220 align:middle line:84%
这在后面变的非常重要

00:09:41.220 --> 00:09:43.140 align:middle line:84%
您正在看的是

00:09:43.140 --> 00:09:47.790 align:middle line:84%
"Ensemble入门":请求，响应和队列

00:09:47.790 --> 00:09:48.508 align:middle line:90%
